# Pipeline for use with virally infected single cell datasets
# P. Burnham, M.H.Z. Wang  2018

configfile:'config.bcell.yaml'

########################################################################################################
# Variables and references

SAMPLEWDIR = config['SAMPWDIR']
MISMATCH = config['GLOBAL']['allowed_mismatch']
DATADIR = config['DATADIR']
GENOMEREF = config['GENOMEREF']
REFFLAT = config['REFFLAT']
METAREF = config['METAREF']
RRNAINTERVALS=config['RRNAINTERVALS']
TMPDIR = config['TMPDIR']

########################################################################################################
# Executables
TMPDIR = config['TMPDIR']
MIXCR = config['MIXCR']
PICARD = config['PICARD']
DROPSEQ = config['DROPSEQ']
FASTQC = config['FASTQCEXEC']
STAREXEC = config['STAREXEC']
CORES = config['CORES']

rule all:
	input:	expand('{PIPELINE_MAJOR}/{sample}/{sample}.allcell.IGstats.txt', PIPELINE_MAJOR=config['PIPELINE_MAJOR'], sample=config['Samples']) ,
		expand('{PIPELINE_MAJOR}/{sample}/{sample}.Bcell.IGstats.txt', PIPELINE_MAJOR=config['PIPELINE_MAJOR'], sample=config['Samples']),
		expand('{PIPELINE_MAJOR}/{sample}/{sample}.tagged.Bcell.numerated.cell.list', PIPELINE_MAJOR=config['PIPELINE_MAJOR'], sample=config['Samples'])


rule fastqc:
	input:
		r1='data/{sample}_R1.fastq.gz', 
		r2='data/{sample}_R2.fastq.gz'
	output: '{path}/{sample}_R1_fastqc.html'
	threads: 2
	shell:
		"{FASTQC} {input.r1} {input.r2} -t {threads} -o {wildcards.path} --extract ; "

rule fastq_to_sam:
	input:
		r1='data/{sample}_R1.fastq.gz', 
		r2='data/{sample}_R2.fastq.gz',
		fastqc='{path}/{sample}_R1_fastqc.html'
	output: temp('{path}/{sample}_unaligned.bam')
	threads: 1
	shell:
		"""
		java -Djava.io.tmpdir={TMPDIR} -jar {PICARD} FastqToSam\
			F1={input.r1} F2={input.r2}\
			SM=DS O={output}
		"""

rule stage1:
	input: '{path}/{sample}_unaligned.bam'
	output: '{path}/{sample}_tagged_unmapped.bam'
	params:
		BC_summary = '{sample}_CELL_barcode.txt',
		UMI_summary = '{sample}_UMI_barcode.txt',
		start_trim = '{sample}_start_trim.txt',
		polyA_trim = '{sample}_polyA_trim.txt',
		BC_range_1 = config['GLOBAL']['BC_range']['first'],
		BC_range_2 = config['GLOBAL']['BC_range']['last'],
		UMI_range_1 = config['GLOBAL']['UMI_range']['first'],
		UMI_range_2 = config['GLOBAL']['UMI_range']['last'],
		sample = '{sample}'
	threads: 4
	shell:
		"""
		mkdir -p {SAMPLEWDIR}/{params.sample}
		{DROPSEQ}/TagBamWithReadSequenceExtended\
			SUMMARY={SAMPLEWDIR}/{params.sample}/{params.BC_summary}\
			BASE_RANGE={params.BC_range_1}-{params.BC_range_2}\
			BASE_QUALITY=10\
			BARCODED_READ=1\
			DISCARD_READ=false\
			TAG_NAME=XC\
			NUM_BASES_BELOW_QUALITY=1\
			INPUT={input}\
			OUTPUT=/dev/stdout COMPRESSION_LEVEL=0 |\
			\
			{DROPSEQ}/TagBamWithReadSequenceExtended\
			SUMMARY={SAMPLEWDIR}/{params.sample}/{params.UMI_summary}\
			BASE_RANGE={params.UMI_range_1}-{params.UMI_range_2}\
			BASE_QUALITY=10\
			BARCODED_READ=1\
			DISCARD_READ=true\
			TAG_NAME=XM\
			NUM_BASES_BELOW_QUALITY=1\
			INPUT=/dev/stdin\
			OUTPUT=/dev/stdout COMPRESSION_LEVEL=0|\
			\
			{DROPSEQ}/FilterBAM TAG_REJECT=XQ\
			INPUT=/dev/stdin\
			OUTPUT=/dev/stdout COMPRESSION_LEVEL=0|\
			\
			{DROPSEQ}/TrimStartingSequence\
			OUTPUT_SUMMARY={SAMPLEWDIR}/{params.sample}/{params.start_trim}\
			SEQUENCE=AAGCAGTGGTATCAACGCAGAGTGAATGGG\
			MISMATCHES=0\
			NUM_BASES=5\
			INPUT=/dev/stdin\
			OUTPUT=/dev/stdout COMPRESSION_LEVEL=0|\
			\
			{DROPSEQ}/PolyATrimmer\
			OUTPUT_SUMMARY={SAMPLEWDIR}/{params.sample}/{params.polyA_trim}\
			MISMATCHES=0\
			NUM_BASES=6\
			OUTPUT={output}\
			INPUT=/dev/stdin
		"""

rule STAR_align:
	input:  '{path}/{sample}_tagged_unmapped.bam'
	output:	ufq = temp('{path}/{sample}_tagged_unmapped.fastq'),
		sam = temp('{path}/{sample}_STAR_Aligned.out.sam'),
		newsam = temp('{path}/{sample}_Aligned.sam'),
		sorted = '{path}/{sample}_Aligned_sorted.sam'
	params:
		prefix = '{sample}_STAR_',
		mismatch = MISMATCH,
		sample = '{sample}'
	threads: 6
	shell:
		"""
		java -Xmx500m -jar -Djava.io.tmpdir={TMPDIR} {PICARD} SamToFastq\
			INPUT={input} FASTQ={output.ufq} ;

		{STAREXEC}\
			--genomeDir {METAREF}\
			--runThreadN {threads}\
			--outFilterMismatchNmax={params.mismatch}\
			--readFilesIn {output.ufq}\
			--genomeLoad NoSharedMemory\
			--outReadsUnmapped Fastx \
			--outFileNamePrefix {wildcards.path}/{params.prefix} ;
		
		cp {output.sam} {output.newsam} ;

		java -Djava.io.tmpdir={TMPDIR} -Dsamjdk.buffer_size=131072 -XX:GCTimeLimit=50 \
			-XX:GCHeapFreeLimit=10 -Xmx4000m -jar {PICARD} SortSam\
			INPUT={output.newsam} OUTPUT={output.sorted} \
			SORT_ORDER=queryname TMP_DIR={TMPDIR};
		"""

rule stage3:
	input:	unmapped = '{path}/{sample}_tagged_unmapped.bam',
		mapped = '{path}/{sample}_Aligned_sorted.sam'
	output: '{path}/{sample}_gene_exon_tagged.bam'
	threads: 4
	shell:
		"""
		java -Djava.io.tmpdir={TMPDIR} -Xmx4000m -jar {PICARD} MergeBamAlignment\
			REFERENCE_SEQUENCE={GENOMEREF}\
			UNMAPPED_BAM={input.unmapped}\
			ALIGNED_BAM={input.mapped}\
			INCLUDE_SECONDARY_ALIGNMENTS=false\
			PAIRED_RUN=false\
			OUTPUT=/dev/stdout COMPRESSION_LEVEL=0|\
			\
			{DROPSEQ}/TagReadWithGeneExon\
			O={output}\
			I=/dev/stdin\
			ANNOTATIONS_FILE={REFFLAT}\
			TAG=GE\
			CREATE_INDEX=true
		"""


rule bead_errors_metrics:
	input: '{path}/{sample}_gene_exon_tagged.bam'
	output: '{path}/{sample}_final.bam'
	params:
		out_stats = '{sample}_synthesis_stats.txt',
		summary = '{sample}_synthesis_summary.txt',
		barcodes = lambda wildcards: config['Samples'][wildcards.sample]['expected_cells'] * 2,
		cells = lambda wildcards: config['Samples'][wildcards.sample]['expected_cells'],
		metrics = '{sample}_rna_metrics.txt',
		sample = '{sample}'
	shell:
		"""{DROPSEQ}/DetectBeadSynthesisErrors\
		INPUT={input}\
		OUTPUT={output}\
		OUTPUT_STATS={SAMPLEWDIR}/{params.sample}/{params.out_stats}\
		SUMMARY={SAMPLEWDIR}/{params.sample}/{params.summary}\
		NUM_BARCODES={params.barcodes}\
		PRIMER_SEQUENCE=AAGCAGTGGTATCAACGCAGAGTAC;
		{DROPSEQ}/SingleCellRnaSeqMetricsCollector\
		INPUT={input}\
		OUTPUT={SAMPLEWDIR}/{params.sample}/{params.metrics}\
		ANNOTATIONS_FILE={REFFLAT}\
		NUM_CORE_BARCODES={params.cells}\
		RIBOSOMAL_INTERVALS={RRNAINTERVALS}
		"""

rule bam_hist:
	input: '{path}/{sample}_gene_exon_tagged.bam'
	output: '{path}/{sample}_hist_out_cell.txt'
	shell:
		"""
		{DROPSEQ}/BAMTagHistogram\
			I={input} O={output} TAG=XC ;
		"""

rule extract_expression:
	input:	bam='{path}/{sample}_gene_exon_tagged.bam'
	output: '{path}/{sample}_expression_matrix.txt.gz'
	params:
		sample = '{sample}',
		numbarcodes = 5000
	shell:
		"""
		{DROPSEQ}/DigitalExpression\
			I={input.bam}\
			O={output}\
			SUMMARY={SAMPLEWDIR}/{params.sample}/{params.sample}_dge.summary.txt \
			NUM_CORE_BARCODES={params.numbarcodes}
		"""

rule gunzip:
	input: '{path}/{sample}_expression_matrix.txt.gz'
	output: '{path}/{sample}_expression_matrix.txt'
	shell:
		""" gunzip -qf {input} ; """

# Get Bcell related Cells and IG genes
########################################################################################################
rule Bcell_list:
	input: '{path}/{sample}_expression_matrix.txt'
	output: barcode = '{path}/{sample}.Bcell.barcodes.txt',
		desc = '{path}/{sample}.allcells.descriptions.txt'
	shell: 
		"""
		 Rscript bin/Rscripts/DropSeq_analysis.barebones.R {wildcards.sample} TRUE 100 ;
		"""

rule Bcell_raw_tags:
	input:	bam = '{path}/{sample}_tagged_unmapped.bam',
		barcode = '{path}/{sample}.Bcell.barcodes.txt'
	output: sam = temp('{path}/{sample}.tagged.Bcell.sam'),
		bam  = temp('{path}/{sample}.tagged.Bcell.bam'),
		fastq = '{path}/{sample}.tagged.Bcell.fastq',
		readid = '{path}/{sample}.tagged.Bcell.reads' 
	threads: 2
	shell:
		"""
		samtools view {input.bam} | LC_ALL=C grep -wFf {input.barcode} \
			 > {output.sam} ;
		awk '{{ print $1":"$12":"$14"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11}}' {output.sam} \
			| samtools view -bS - > {output.bam} ;
		bamToFastq -i {output.bam} -fq {output.fastq} ;
		awk 'NR%4==1' {output.fastq} > {output.readid} ; 
		"""

rule allcell_raw_tags:
	input:  bam = '{path}/{sample}_tagged_unmapped.bam',
		celldesc = '{path}/{sample}.allcells.descriptions.txt'
	output: barcode = '{path}/{sample}.allcell.barcodes.txt',
		sam = temp('{path}/{sample}.tagged.allcell.sam'),
		bam  = temp('{path}/{sample}.tagged.allcell.bam'),
		fastq = '{path}/{sample}.tagged.allcell.fastq',
		readid = '{path}/{sample}.tagged.allcell.reads'
	threads: 2
	shell:
		"""
		cut -f 1 {input.celldesc} > {output.barcode} ;
		samtools view {input.bam} | LC_ALL=C grep -wFf {output.barcode} \
			> {output.sam} ;
		awk '{{ print $1":"$12":"$14"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11}}' {output.sam} \
			| samtools view -bS - > {output.bam} ;
		bamToFastq -i {output.bam} -fq {output.fastq} ;
		awk 'NR%4==1' {output.fastq} > {output.readid} ;
		"""



rule ig_process:
	input: '{path}/{sample}.tagged.Bcell.fastq'
	output:	vdj1 = '{path}/{sample}.tagged.Bcell.vdjca',
		rep = '{path}/{sample}.tagged.Bcell.reportTxt',
		rescue1 = '{path}/{sample}.tagged.Bcell.rescued1.vdjca',
		rescue2 = '{path}/{sample}.tagged.Bcell.rescued2.vdjca',
		clones = '{path}/{sample}.tagged.Bcell.clns',
		clnstxt = '{path}/{sample}.tagged.Bcell.clones.txt',
		trb = '{path}/{sample}.tagged.Bcell.clones.TRB.txt',
		igh = '{path}/{sample}.tagged.Bcell.clones.IGH.txt',
		alnAll = '{path}/{sample}.tagged.Bcell.alignmentsAll.txt',
		alns = '{path}/{sample}.tagged.Bcell.alignments.txt',
		viewalns = '{path}/{sample}.tagged.Bcell.aligned_view.txt'
	shell:
		"""
			{MIXCR} align -f -s hsa -p rna-seq -OallowPartialAlignments=true {input} {output.vdj1} > {output.rep} ;
			{MIXCR} assemblePartial -f {output.vdj1} {output.rescue1} ;
			{MIXCR} assemblePartial -f {output.rescue1} {output.rescue2} ;
			{MIXCR} assemble -f {output.rescue2} {output.clones} ;
			{MIXCR} exportClones -f {output.clones} {output.clnstxt} ;
			{MIXCR} exportClones -f -c TRB {output.clones} {output.trb} ;
			{MIXCR} exportClones -f -c IG {output.clones} {output.igh} ;
			{MIXCR} exportAlignments -f -c IG {output.rescue2} {output.alnAll} ;
			{MIXCR} exportAlignments -f -c IG -readID -vGene -vHitScore -dGene -dHitScore -jGene \
				-jHitScore -cGene -cHitScore {output.rescue2} {output.alns} ;
			{MIXCR} exportAlignmentsPretty {output.rescue2} {output.viewalns} ;
		"""

#allcells performs mixcr on all cells regardless of subtype
rule ig_allcells_process:
	input: '{path}/{sample}.tagged.allcell.fastq'
	output: vdj1 = '{path}/{sample}.tagged.allcell.vdjca',
		rep = '{path}/{sample}.tagged.allcell.reportTxt',
		rescue1 = '{path}/{sample}.tagged.allcell.rescued1.vdjca',
		rescue2 = '{path}/{sample}.tagged.allcell.rescued2.vdjca',
		clones = '{path}/{sample}.tagged.allcell.clns',
		clnstxt = '{path}/{sample}.tagged.allcell.clones.txt',
		trb = '{path}/{sample}.tagged.allcell.clones.TRB.txt',
		igh = '{path}/{sample}.tagged.allcell.clones.IGH.txt',
		alnAll = '{path}/{sample}.tagged.allcell.alignmentsAll.txt',
		alns = '{path}/{sample}.tagged.allcell.alignments.txt',
		viewalns = '{path}/{sample}.tagged.allcell.aligned_view.txt'
	shell:
		"""
			{MIXCR} align -f -s hsa -p rna-seq -OallowPartialAlignments=true {input} {output.vdj1} > {output.rep} ;
			{MIXCR} assemblePartial -f {output.vdj1} {output.rescue1} ;
			{MIXCR} assemblePartial -f {output.rescue1} {output.rescue2} ;
			{MIXCR} assemble -f {output.rescue2} {output.clones} ;
			{MIXCR} exportClones -f {output.clones} {output.clnstxt} ;
			{MIXCR} exportClones -f -c TRB {output.clones} {output.trb} ;
			{MIXCR} exportClones -f -c IG {output.clones} {output.igh} ;
			{MIXCR} exportAlignments -f -c IG {output.rescue2} {output.alnAll} ;
			{MIXCR} exportAlignments -f -c IG -readID -vGene -vHitScore -dGene -dHitScore -jGene \
				-jHitScore -cGene -cHitScore {output.rescue2} {output.alns} ;
			{MIXCR} exportAlignmentsPretty {output.rescue2} {output.viewalns} ;
		"""

rule enumerate_Bcell:
	input: '{path}/{sample}.tagged.Bcell.fastq'
	output:	'{path}/{sample}.tagged.Bcell.numerated.cell.list'
	threads: 1
	shell:
		"""
			awk 'NR % 4 ==1' {input} | cut -d':' -f 10 | nl > {output}
		"""

rule ig_stats_Bcell:
	input: 	a='{path}/{sample}_expression_matrix.txt',
		b='{path}/{sample}.tagged.Bcell.alignments.txt'
	output: '{path}/{sample}.Bcell.IGstats.txt'
	shell: "Rscript bin/Rscripts/Mixcr_analysis.R {wildcards.sample} ; "

rule ig_stats_allcell:
	input:  a='{path}/{sample}_expression_matrix.txt',
		b='{path}/{sample}.tagged.allcell.alignments.txt'
	output: '{path}/{sample}.allcell.IGstats.txt'
	shell: "Rscript bin/Rscripts/Mixcr_analysis.allcell.R {wildcards.sample} ; "

rule colorTNSE:
	input: '{path}/{sample}.allcells.descriptions.txt'
	output: '{path}/{sample}.HCLC_color.eps'
	shell: "Rscript bin/Rscripts/Dropseq_tsne.bcell.hclcplot.R {wildcards.sample} ; "
